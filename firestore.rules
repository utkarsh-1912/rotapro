/**
 * @fileoverview Firestore Security Rules for RotaPro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * supplemented by an Existence-based admin role mechanism.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profiles. Only the authenticated user can read/write their own profile.
 * - /roles_admin/{userId}:  The mere existence of a document under this path grants admin privileges to the corresponding user. The content of the document is irrelevant.
 *
 * Key Security Decisions:
 * - User Listing Disabled: Listing all users is not permitted to prevent information disclosure.
 * - Admin Role via Existence: Admin privileges are granted based on document existence in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 * - The `roles_admin` collection exemplifies denormalization. Instead of storing roles as a field inside the `users` document or in a separate collection,
 *   the existence of a document in `/roles_admin/{userId}` directly confers admin status. This avoids costly `get()` calls in security rules.
 *
 * Structural Segregation:
 * - User profiles are stored in the `/users/{userId}` collection, separate from admin role definitions in `/roles_admin/{userId}`. This ensures clear separation of concerns
 *   and simplifies access control logic.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.  Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.  The data.id field must also equal 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can get, update, and delete their own profile if request.auth.uid == 'user_abc'.
     * @deny (create, get, update, delete) - User 'user_xyz' cannot access user 'user_abc' profile.
     * @principle Enforces document ownership for all operations.  Validates the user ID on create to prevent spoofing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin roles using Existence over Content. If a document exists for a user ID, the user is an admin.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can grant themselves admin role by creating a document with their ID if the document does not exist.
     * @allow (get, delete) - An admin can read or remove their own admin role document.
     * @deny (create, get, delete) - A non-admin cannot create, get, or delete another user's admin role.
     * @principle Uses Existence over Content to grant admin roles.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all admin roles is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false; //Updates are not required.  Admin status is purely existence-based.
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}