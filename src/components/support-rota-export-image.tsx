
"use client";

import React from "react";
import { format } from "date-fns";
import { Table, TableBody, TableCell, TableRow, TableHead, TableHeader } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import type { RotaGeneration, TeamMember } from "@/lib/types";
import { useRotaStore } from "@/lib/store";

type AdhocStatus = Record<string, Record<number, boolean>>;
type AdhocNotes = Record<string, string>;

interface SupportRotaExportImageProps {
    activeGeneration: RotaGeneration;
    teamMembersInRota: TeamMember[];
    weeks: { start: Date; end: Date }[];
    adhocStatus: AdhocStatus;
    adhocNotes: AdhocNotes;
}

export const SupportRotaExportImage = React.forwardRef<HTMLDivElement, SupportRotaExportImageProps>(
    ({ activeGeneration, teamMembersInRota, weeks, adhocStatus, adhocNotes }, ref) => {
        const { shifts } = useRotaStore();
        const shiftMap = new Map(shifts.map(s => [s.id, s]));
        const title = `Ad-Hoc Support Rota: ${format(weeks[0].start, 'd MMM')} - ${format(weeks[weeks.length - 1].end, 'd MMM yyyy')}`;

        return (
            <div ref={ref} className="px-8 py-4 bg-white text-black font-body w-[1200px]">
                <h2 className="text-xl text-center mb-4">{title}</h2>
                <div className="border rounded-lg">
                    <Table>
                        <TableHeader>
                             <TableRow>
                                <TableHead className="font-semibold text-black border-r">Week</TableHead>
                                {teamMembersInRota.map(member => {
                                     const shiftId = activeGeneration.assignments[member.id];
                                     const shift = shiftId ? shiftMap.get(shiftId) : null;
                                     return (
                                        <TableHead key={member.id} className="text-center font-semibold text-black">
                                            {member.name}
                                            {shift && <div className="font-normal text-xs">({shift.name})</div>}
                                        </TableHead>
                                     )
                                })}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                           {weeks.map((week, weekIndex) => (
                               <TableRow key={weekIndex}>
                                   <TableCell className="font-semibold text-black border-r whitespace-nowrap">
                                        {format(week.start, 'd MMM')} - {format(week.end, 'd MMM')}
                                   </TableCell>
                                   {teamMembersInRota.map(member => (
                                       <TableCell key={member.id} className="text-center text-xs text-gray-700 align-top">
                                           {adhocStatus[member.id]?.[weekIndex] ? (adhocNotes[member.id] || "✔️") : ""}
                                       </TableCell>
                                   ))}
                               </TableRow>
                           ))}
                        </TableBody>
                    </Table>
                </div>
                 <p className="text-xs text-gray-500 mt-4 text-center">Generated by RotaPro on {format(new Date(), 'PPpp')}</p>
            </div>
        );
    }
);

SupportRotaExportImage.displayName = 'SupportRotaExportImage';
